package org.example;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

class LetterTilePossibilities {

    public static void main(String[] args) {
        LetterTilePossibilities ltp = new LetterTilePossibilities();
        System.out.println(ltp.numTilePossibilitiesNeetCodeExplanation("AAB"));
    }
    public int numTilePossibilities(String tiles) {
        Set<String> sequences = new HashSet<>();
        int len = tiles.length();
        boolean[] used = new boolean[len];

        // Generate all possible sequences including empty string
        generateSequences(tiles, "", used, sequences);

        // Subtract 1 to exclude empty string from count
        return sequences.size() - 1;
    }

    // Below is an example of recursion with backtrack
    // implemented my self after understanding from neetcode in python
    // neetcode: https://www.youtube.com/watch?v=8FrJX-P_DnE
    // leetcode: https://leetcode.com/problems/letter-tile-possibilities/description/?envType=daily-question&envId=2025-02-17
    public int numTilePossibilitiesNeetCodeExplanation(String tiles) {
        HashMap<Character, Integer> characterCount = new HashMap<>();
        for (int i = 0 ; i < tiles.length(); i++){
            if (!characterCount.containsKey(tiles.charAt(i))){
                characterCount.put(tiles.charAt(i), 1);
            }else{
                characterCount.put(tiles.charAt(i), characterCount.get(tiles.charAt(i))+ 1);
            }
        }

        return countPossible(characterCount);
    }

    private int countPossible(HashMap<Character, Integer> characterCount) {
        int count = 0;
        for (Character c: characterCount.keySet()){
            if (characterCount.get(c) > 0){
                characterCount.put(c, characterCount.get(c)-1);
                count++;
                count +=  countPossible(characterCount);
                characterCount.put(c, characterCount.get(c)+1);
            }
        }
        return count;
    }

    // this is from the editorial on leetcode for daily question
    // date: 17thfeb 2025
    private void generateSequences(
            String tiles,
            String current,
            boolean[] used,
            Set<String> sequences
    ) {
        //CURRENT = ""+A
        //cURRENT= ""+A+A
        //cURRENT= ""+A+A+B
        // Add current sequence to set
        sequences.add(current);
        System.out.println(current);
        // Try adding each unused character to current sequence
        for (int pos = 0; pos < tiles.length(); pos++) {
            if (!used[pos]) {
                used[pos] = true;
                generateSequences(
                        tiles,
                        current + tiles.charAt(pos),
                        used,
                        sequences
                );
                used[pos] = false;
            }
        }
    }
}
